{"uid":"fc79fc2d76d36a6d","name":"test_trainer_menu_options","fullName":"test.test_ui.trainer.ui_navigation_flow.dashboard.test_tp_menu_navigation_flow.TestTPDashboard#test_trainer_menu_options","historyId":"14478350460db838242ee09e63c13549","time":{"start":1750970740810,"stop":1750970740810,"duration":0},"status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"open_browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"babfcb31c17cde2129eda706522c2a9f\")>\n\n    @pytest.fixture(scope=\"function\")\n    def trainer_logged_in(open_browser):\n        try:\n>           login_as_role(open_browser,\"trainer\")\n\ntest\\conftest.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc\\utils\\helpers\\login_as_role.py:10: in login_as_role\n    login_with_credentials(driver, role, email=user_data[\"email\"], password=user_data[\"password\"], url=user_data[\"url\"])\nsrc\\utils\\helpers\\login_helper.py:16: in login_with_credentials\n    WebDriverWait(driver, 30).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"babfcb31c17cde2129eda706522c2a9f\")>\nmethod = <function login_with_credentials.<locals>.<lambda> at 0x0000025E4340B4C0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvirtualenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nopen_browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"babfcb31c17cde2129eda706522c2a9f\")>\n\n    @pytest.fixture(scope=\"function\")\n    def trainer_logged_in(open_browser):\n        try:\n            login_as_role(open_browser,\"trainer\")\n        except Exception as e:\n            print(f\"Login failed for trainer . Error: {e}\")\n>           assert False\nE           assert False\n\ntest\\conftest.py:23: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"open_browser","time":{"start":1750970740815,"stop":1750970744863,"duration":4048},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"trainer_logged_in","time":{"start":1750970744863,"stop":1750970783465,"duration":38602},"status":"failed","statusMessage":"AssertionError: assert False\n","statusTrace":"  File \"C:\\SkillWright\\AutomationTesting\\Test_FYC\\virtualenv\\Lib\\site-packages\\pluggy\\_callers.py\", line 38, in run_old_style_hookwrapper\n    res = yield\n          ^^^^^\n  File \"C:\\SkillWright\\AutomationTesting\\Test_FYC\\virtualenv\\Lib\\site-packages\\pluggy\\_callers.py\", line 139, in _multicall\n    teardown.throw(exception)\n  File \"C:\\SkillWright\\AutomationTesting\\Test_FYC\\virtualenv\\Lib\\site-packages\\pluggy\\_callers.py\", line 53, in run_old_style_hookwrapper\n    return result.get_result()\n           ^^^^^^^^^^^^^^^^^^^\n  File \"C:\\SkillWright\\AutomationTesting\\Test_FYC\\virtualenv\\Lib\\site-packages\\pluggy\\_result.py\", line 103, in get_result\n    raise exc.with_traceback(tb)\n  File \"C:\\SkillWright\\AutomationTesting\\Test_FYC\\virtualenv\\Lib\\site-packages\\pluggy\\_callers.py\", line 38, in run_old_style_hookwrapper\n    res = yield\n          ^^^^^\n  File \"C:\\SkillWright\\AutomationTesting\\Test_FYC\\virtualenv\\Lib\\site-packages\\pluggy\\_callers.py\", line 121, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\SkillWright\\AutomationTesting\\Test_FYC\\virtualenv\\Lib\\site-packages\\_pytest\\fixtures.py\", line 1123, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\SkillWright\\AutomationTesting\\Test_FYC\\virtualenv\\Lib\\site-packages\\_pytest\\fixtures.py\", line 902, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n                     ^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\SkillWright\\AutomationTesting\\Test_FYC\\test\\conftest.py\", line 23, in trainer_logged_in\n    assert False\n","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":true,"stepsCount":0,"attachmentStep":false,"hasContent":true}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"open_browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"babfcb31c17cde2129eda706522c2a9f\")>\n\n    @pytest.fixture(scope=\"function\")\n    def trainer_logged_in(open_browser):\n        try:\n>           login_as_role(open_browser,\"trainer\")\n\ntest\\conftest.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc\\utils\\helpers\\login_as_role.py:10: in login_as_role\n    login_with_credentials(driver, role, email=user_data[\"email\"], password=user_data[\"password\"], url=user_data[\"url\"])\nsrc\\utils\\helpers\\login_helper.py:16: in login_with_credentials\n    WebDriverWait(driver, 30).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"babfcb31c17cde2129eda706522c2a9f\")>\nmethod = <function login_with_credentials.<locals>.<lambda> at 0x0000025E4340B4C0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvirtualenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nopen_browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"babfcb31c17cde2129eda706522c2a9f\")>\n\n    @pytest.fixture(scope=\"function\")\n    def trainer_logged_in(open_browser):\n        try:\n            login_as_role(open_browser,\"trainer\")\n        except Exception as e:\n            print(f\"Login failed for trainer . Error: {e}\")\n>           assert False\nE           assert False\n\ntest\\conftest.py:23: AssertionError","steps":[],"attachments":[{"uid":"87fe9bca142bc05e","name":"log","source":"87fe9bca142bc05e.txt","type":"text/plain","size":502}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":true,"stepsCount":0,"attachmentStep":false,"hasContent":true},"afterStages":[{"name":"open_browser::0","time":{"start":1750970783971,"stop":1750970786569,"duration":2598},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"labels":[{"name":"tag","value":"smoke_checklist"},{"name":"parentSuite","value":"test.test_ui.trainer.ui_navigation_flow.dashboard"},{"name":"suite","value":"test_tp_menu_navigation_flow"},{"name":"subSuite","value":"TestTPDashboard"},{"name":"host","value":"DESKTOP-B719PVK"},{"name":"thread","value":"20648-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test.test_ui.trainer.ui_navigation_flow.dashboard.test_tp_menu_navigation_flow"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":["smoke_checklist"]},"source":"fc79fc2d76d36a6d.json","parameterValues":[]}