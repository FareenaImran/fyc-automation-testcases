{"name": "test_trainer_menu_options", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "open_browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"babfcb31c17cde2129eda706522c2a9f\")>\n\n    @pytest.fixture(scope=\"function\")\n    def trainer_logged_in(open_browser):\n        try:\n>           login_as_role(open_browser,\"trainer\")\n\ntest\\conftest.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc\\utils\\helpers\\login_as_role.py:10: in login_as_role\n    login_with_credentials(driver, role, email=user_data[\"email\"], password=user_data[\"password\"], url=user_data[\"url\"])\nsrc\\utils\\helpers\\login_helper.py:16: in login_with_credentials\n    WebDriverWait(driver, 30).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"babfcb31c17cde2129eda706522c2a9f\")>\nmethod = <function login_with_credentials.<locals>.<lambda> at 0x0000025E4340B4C0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvirtualenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nopen_browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"babfcb31c17cde2129eda706522c2a9f\")>\n\n    @pytest.fixture(scope=\"function\")\n    def trainer_logged_in(open_browser):\n        try:\n            login_as_role(open_browser,\"trainer\")\n        except Exception as e:\n            print(f\"Login failed for trainer . Error: {e}\")\n>           assert False\nE           assert False\n\ntest\\conftest.py:23: AssertionError"}, "attachments": [{"name": "log", "source": "e913afec-0634-4f47-a2a0-f2048f525465-attachment.txt", "type": "text/plain"}], "start": 1750970740810, "stop": 1750970740810, "uuid": "72fcf784-222e-489e-a330-de0efe3ef2f4", "historyId": "14478350460db838242ee09e63c13549", "testCaseId": "14478350460db838242ee09e63c13549", "fullName": "test.test_ui.trainer.ui_navigation_flow.dashboard.test_tp_menu_navigation_flow.TestTPDashboard#test_trainer_menu_options", "labels": [{"name": "tag", "value": "smoke_checklist"}, {"name": "parentSuite", "value": "test.test_ui.trainer.ui_navigation_flow.dashboard"}, {"name": "suite", "value": "test_tp_menu_navigation_flow"}, {"name": "subSuite", "value": "TestTPDashboard"}, {"name": "host", "value": "DESKTOP-B719PVK"}, {"name": "thread", "value": "20648-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_ui.trainer.ui_navigation_flow.dashboard.test_tp_menu_navigation_flow"}]}